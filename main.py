import os
import requests
from flask import Flask, request, jsonify
from datetime import datetime
from processar_arquivo import processar_arquivo_do_bitrix
from chamar_openai_com import chamar_openai_com  # Fun√ß√£o separada
import re

def limpar_marcadores_de_citacao(resposta):
    # Remove blocos como ÓàÄ...ÓàÅ ou ÓàÇ...ÓàÅ
    resposta = re.sub(r"[ÓàÄÓàÇ].*?[ÓàÅ]", "", resposta)
    # Remove caracteres soltos usados como marcador (ex: ÓàÄ, ÓàÇ, ÓàÅ)
    return resposta.replace("ÓàÄ", "").replace("ÓàÇ", "").replace("ÓàÅ", "")


app = Flask(__name__)

# ‚úÖ Vari√°vel de controle de hor√°rio (desativa se False)
HABILITAR_RESTRICAO_HORARIO = False

# Configura√ß√µes fixas
BOT_NAME = "Ana Lis"
BOT_COLOR = "ORANGE"
WELCOME_MESSAGE = "Ol√°! Sou a Ana Lis, sua assistente virtual. Como posso te ajudar?"

PUBLIC_URL = "https://lis-v2-bot.onrender.com"
WEBHOOK_KEY = "jvlko7nqb9mo0lo0"  # Substitua pela sua chave real
BITRIX_WEBHOOK = f"https://laboratoriocac.bitrix24.com.br/rest/1/{WEBHOOK_KEY}"

@app.route('/install', methods=['POST'])
def install():
    data = request.args.to_dict()
    print("üì¶ Dados recebidos na instala√ß√£o:", data)

    domain = data.get("DOMAIN")
    protocol = "https" if data.get("PROTOCOL") == "1" else "http"

    if not domain:
        return jsonify({"erro": "Domain n√£o especificado", "status": "Erro interno"}), 500

    webhook_url = f"{protocol}://{domain}/rest/1/{WEBHOOK_KEY}/imbot.register.json"

    payload = {
        "CODE": "ana.lis.bot",
        "CLIENT_ID": "1",
        "TYPE": "B",
        "EVENT_HANDLER": f"{PUBLIC_URL}/handler",
        "PROPERTIES": {
            "NAME": BOT_NAME,
            "COLOR": BOT_COLOR
        }
    }

    try:
        response = requests.post(webhook_url, json=payload)
        bitrix_result = response.json()
        print("üõ∞Ô∏è Resposta do Bitrix:", bitrix_result)
        return jsonify({"status": "Instala√ß√£o recebida com sucesso", "bitrix_response": bitrix_result})
    except Exception as e:
        return jsonify({"erro": str(e), "status": "Erro interno"}), 500

@app.route('/handler', methods=['POST'])
def handler():
    try:
        if request.is_json:
            data = request.get_json()
        else:
            data = request.form.to_dict()
        print("üì® Dados recebidos no /handler:", data)

        mensagem_usuario = data.get("data[PARAMS][MESSAGE]", "")
        dialog_id = data.get("data[PARAMS][DIALOG_ID]")

        if not dialog_id:
            return jsonify({"status": "Di√°logo ausente"})

        # ‚è∞ Restri√ß√£o de hor√°rio (se ativado)
        if HABILITAR_RESTRICAO_HORARIO:
            hora = datetime.now().hour
            minuto = datetime.now().minute
            if hora < 6 or (hora == 6 and minuto < 30) or hora >= 23:
                mensagem_limite = "Ana Lis est√° dispon√≠vel das 06:30 √†s 18:00. Por favor, retorne nesse hor√°rio üòä"
                requests.post(
                    f"{BITRIX_WEBHOOK}/imbot.message.add.json",
                    json={
                        "DIALOG_ID": dialog_id,
                        "CLIENT_ID": "8",
                        "MESSAGE": mensagem_limite
                    },
                    headers={"Content-Type": "application/json"}
                )
                return jsonify({"status": "Fora do hor√°rio, resposta enviada."})

        # üìé Detecta arquivos enviados
        arquivo_url = None
        arquivo_nome = None

        for key, value in data.items():
            if key.endswith("][urlDownload]") and "data[PARAMS][FILES][" in key:
                arquivo_url = value
                inicio = key.find("FILES[") + 6
                fim = key.find("]", inicio)
                file_id = key[inicio:fim]
                arquivo_nome = data.get(f"data[PARAMS][FILES][{file_id}][name]", "arquivo_desconhecido")
                break

        # üß† Gera resposta da IA
        if arquivo_url and arquivo_nome:
            print("üìÇ Arquivo detectado! Enviando ao GPT-4o com vis√£o...")
            try:
                resposta_ia = processar_arquivo_do_bitrix(arquivo_url, arquivo_nome)
            except Exception as e:
                print(f"‚ùå Erro em processar_arquivo_do_bitrix: {e}")
                resposta_ia = "‚ùå O tipo de arquivo n√£o √© reconhecido como imagem compat√≠vel para an√°lise."
        elif mensagem_usuario:
            print("üí¨ Mensagem de texto detectada! Enviando ao GPT...")
            resposta_ia = chamar_openai_com(mensagem_usuario)
            resposta_ia = limpar_marcadores_de_citacao(resposta_ia)
        else:
            resposta_ia = "‚ùóMensagem vazia ou sem arquivo. Por favor, envie um texto ou anexo v√°lido."

        # üì§ Envia resposta para o Bitrix
        requests.post(
            f"{BITRIX_WEBHOOK}/imbot.message.add.json",
            json={
                "DIALOG_ID": dialog_id,
                "CLIENT_ID": "8",
                "MESSAGE": resposta_ia
            },
            headers={"Content-Type": "application/json"}
        )

        return jsonify({"status": "Mensagem processada com sucesso."})

    except Exception as e:
        print("‚ùå Erro no handler:", e)
        return jsonify({"erro": str(e), "status": "Erro ao processar mensagem"}), 500



@app.route("/", methods=["GET"])
def home():
    return "Ana Lis est√° online!"

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
